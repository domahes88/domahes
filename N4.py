__author__ = 'Evgenii'
"""
ДЗ №4. Функции

Стараемся как можно меньше создавать и использовать глобавльные переменные. Кому удастся обойтись без них вообще?

1. Берем задачу из дз №3. Выделяем следующие процессы в функции:
- ввод команды - отдельная функция
- сообщение в случае ошибки ввода команды - отдельная функция
- Ввести и Вывести - 2 отдельные функции
- поиски по условию - 3 отдельные функции соответственно
- сохранение в pickle и загрузка из pickle - 2 отдельные функции

2. Улучшаем:
функции Ввести и Вывести добавляем в словарь следующим образом:
FUNCS = {
'ввести': input_func,
'вывести': output_func,
}
И меняем if-else на поиск в этом словаре и запуск функции по ключу словаря.

3. Добавляем в программу логику "Редактировать" для изменения уже введенных данных, а также "Удалить". Как с помощью функций сократить программный код в этом случае?

* 4. А теперь вводим в программу логистику. У каждого автомобиля из предыдущей задачи теперь есть номерной знак ('o007py' например) и координаты - x и y на плоскости относительно автобазы.

пользователь теперь может также выбрать автомобиль по номерному знаку и переместить его в другие координаты.

* 5. При этом поставить 2 автомобиля в одинаковые координаты система не позволяет.

* 6. При движении считаем общий пробег автомобиля и сохраняем.

** 7. Стараемся сделать так, чтобы все состояло из функций, и каждая функция была как можно короче (хорошо в районе 3 строк кода).

"""



import pickle

#1

n, f, model, ls = 1, [], [], []

while f != 'stop':
    model.append(input(str(n) + ' модель авто - '))
    ls.append(input('лошадиные силы - '))
    n += 1
    f = input('''
Ведите stop, если продолжит нажмите enter ''')

f = open('c:/temp/rino', 'wb')

model_s = []
for i in range(len(model)): #Создаем единый список авто + мощность "[[a, 1], [b, 2], ...]]"
    model_s.append([model[i]])
    model_s[i].append(ls[i])

#запись в pycle

pickle.dump(model_s, f)
f.close()

#проверка на буквы и цифры

for j in range(len(model_s)):
    if str(model_s[j][0]).isalpha():
        pass
    else:
        print('строка ' + str(model_s[j][0]) + ' не состаит только из букв')
    if str(model_s[j][1]).isdigit():
        pass
    else:
        print('строка ' + str(model_s[j][1]) + ' не состаит только из цифр')

#Сортировка по алфовиту
epa = model
epa.sort()

print("""
сортировка

""")

for i in epa:
    print(i)

#Своя сортировка циклами из файла

f = open('c:/temp/rino', 'rb')
read = pickle.load(f)
print(read)
