
"""
ДЗ №4. Функции

Стараемся как можно меньше создавать и использовать глобавльные переменные. Кому удастся обойтись без них вообще?

1. Берем задачу из дз №3. Выделяем следующие процессы в функции:
- ввод команды - отдельная функция
- сообщение в случае ошибки ввода команды - отдельная функция
- Ввести и Вывести - 2 отдельные функции
- поиски по условию - 3 отдельные функции соответственно
- сохранение в pickle и загрузка из pickle - 2 отдельные функции

2. Улучшаем:
функции Ввести и Вывести добавляем в словарь следующим образом:
FUNCS = {
'ввести': input_func,
'вывести': output_func,
}

И меняем if-else на поиск в этом словаре и запуск функции по ключу словаря.
3. Добавляем в программу логику "Редактировать" для изменения уже введенных данных, а также "Удалить". Как с помощью функций сократить программный код в этом случае?
* 4. А теперь вводим в программу логистику. У каждого автомобиля из предыдущей задачи теперь есть номерной знак ('o007py' например) и координаты - x и y на плоскости относительно автобазы.
пользователь теперь может также выбрать автомобиль по номерному знаку и переместить его в другие координаты.
* 5. При этом поставить 2 автомобиля в одинаковые координаты система не позволяет.
* 6. При движении считаем общий пробег автомобиля и сохраняем.
** 7. Стараемся сделать так, чтобы все состояло из функций, и каждая функция была как можно короче (хорошо в районе 3 строк кода).
"""




#1


#ввод

def napolnitel():
    d = []
    f = []
    while d != 'stop':
        f.append([input()])
        d = input(' - stop ? - ')
    return f

def ps(a):
    return a.append(napolnitel())

#вывод

def vivod(a):
    for i in range(len(a)+1):
        print(a[i])

# фильтрация по условию

# по минимуму числовые значения

def minn(b):
    m = b[0]
    for x in b:
        if m > x:
            m = x
    return  m

# по максимуму числовые значения

def maxx(b):
    m = b[0]
    for x in b:
        if m < x:
            m = x
    return  m

# в промежутке

def sts(b):
    print('всего в списке ' + str(len(b)) + ' объектов')
    f = int(input('введите от какого числа будем вести чтение - '))
    g = int(input('введите до какого числа будем вести чтение - '))
    print('Увожаемый вот ваш срез ', b[f:g+1])

# - сохранение в pickle и загрузка из pickle - 2 отдельные функции

def pic():
    import pickle
    f = input('Веди путь к файлу ')
    g = open(f, 'wb')

def picd():
    import pickle
    f = input('Веди путь к файлу ')
    g = open(f, 'rb')
    return g

#2. Улучшаем:
#функции Ввести и Вывести добавляем в словарь следующим образом:
#FUNCS = {
#'ввести': input_func,
#'вывести': output_func,
#}

funcs = {
    'ввести': napolnitel(),
    'вывести': vivod(input())}



